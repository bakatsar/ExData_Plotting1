d
e
2
3
4
r
v
x
a
ss
"
data[,"Ozone" > 31]
ot <-data[,"Ozone" > 31]
ot <-data["Ozone" > 31]
ot <-data["Ozone" > 31,]
ot <-data[["Ozone"]]
ot <-data[["Ozone"]] > 31
ot <-data[["Ozone"]] > 31 & data[["Temp"]] > 90
not <- data[ot,]
not <- data[ot]
not <- data[,ot]
not <- data[ot,]
not[["Solar.R"]]
mean(not[["Solar.R"]])
t2 <-not[["Solar.R"]]
t2 <- t2[!is.na(t2)]
mean(t2)
data[["Temp"]] == 6
data[["Month"]] == 6
data[data[["Month"]] == 6,]
data[data[["Month"]] == 6,][["Temp"]]
mean(data[data[["Month"]] == 6,][["Temp"]])
max(data[data[["Month"]] == 5,][["Ozone"]])
data[data[["Month"]] == 5,][["Ozone"]]
t1 <-data[data[["Month"]] == 5,][["Ozone"]]
t1 <- t1[!is.na(t1)]
max(t1)
data
max
search()
data <- read.csv("/home/bakaking/Coursera/rprog/quiz/hw1_data.csv")
names(data)
hw1_data <- read.csv("~/Coursera/rprog/quiz/hw1_data.csv")
View(hw1_data)
ls
is.na
na.rm
savehistory("~/Coursera/rprog/quiz/hw1_console.Rhistory")
ls()
install.packages("swirl")
library(swirl)
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
svector <- makeVector(c(1,2,3))
svector.getmean
svector$getmean
svector$get
cachemean(svector)
my_matrix <- matrix(1:4,2,2)
solve(my_matrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## Creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- function(inverse) i <<- inverse
getInverse <- function() i
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
## Computes the inverse of the special "matrix" returned by makeCacheMatrix
## Retrieve the inverse from the cache if calculated
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
i
}
my_matrix <- matrix(1:4,2,2)
cache_matrix <- makeCacheMatrix(my_matrix)
cacheSolve(cache_matrix)
cacheSolve(cache_matrix)
cacheSolve(cache_matrix)
cacheSolve(cache_matrix)
cacheSolve(cache_matrix)
cacheSolve(cache_matrix)
cache_matrix <- makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(cache_matrix)
matrix(1:9,3,3)
solve(matrix(1:9,3,3))
matrix(1,2,2)
solve(matrix(1,2,2))
myv <- c(1,3,4,3,2)
makeVector(myv)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <- y
m <- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(myv)
sv <- makeVector(myv)
sv$get
cachemean(sv)
cachemean(sv)
cachemean(sv)
cachemean(sv)
sv <- makeVector(c(2,3,2,3,4,33,21))
cahcemean(sv)
cachemean(sv)
cachemean(sv)
cachemean(sv)
cachemean(sv)
cachemean(sv)
x
y
m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mv <- makeVector(c(1,2,3,4,3,4))
m
mv$m
cachemean(mv)
mv$m
mv$s
mv$get
print(mv$get)
mv$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <- y
m <- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mv <- makeVector(c(1,2,3,4))
cachemean(mv)
cachemean(mv)
cachemean(mv)
mv$set(c(3,4,5,6))
cachemean(mv)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mv <- makeVector(c(1,2,3,4))
cachemean(m)
cachemean(mv)
mv$set(c(3,4,5,6))
cachemean(mv)
?<<-
<<-
library(datasets)
data(iris)
?iris
iris
names(iris)
split
split(iris, iris$Species)
mys <- split(iris, iris$Species)
lapply(iris, mys)
lapply
mys
mys$virginica
mean(mys$virginica$Sepal.Length)
colMeans(iris)
colMeans
apply
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
names(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply
tapply(mtcars$hp, mtcars$cyl, mean)
t <- tapply(mtcars$hp, mtcars$cyl, mean)
t[4]-t[8]
t
names(t)
t$4-t$8
t["4"]-t["8"]
debug(ls)
ls
ls(t)
d
skl
quit
quit()
exit()
?
?debug
undebug(ls)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?qpois
?ppois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(mu_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
req(0, times=40)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect <1
tf
num_vect >=6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "bakaking")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep ="")
paste(LETTERS,1:4, sep="-")
x <- c(44,NA,5,NA)
x*3
y <-rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <-my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow=4, ncal=5)
my_matrix2 <- matrix(data = 1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_dat
my_data
install_from_swirl("Data Analysis")
install.packages("XML")
install.packages("XML")
library(XML)
xmlFile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(xmlFile, "quiz1.xml", method="wget")
doc <- xmlTreeParse("quiz1.xml")
rootnote <-xmlRoot(doc)
xpathSApply(rootnote, "//zipcode", xmlValue)
names(doc)
xpathSApply(doc, "//zipcode", xmlValue)
xmlSApply(rootnote, xmlValue)
xpathSApply(rootnote, path="//zipcode",xmlValue)
xpathSApply(rootnote, path="//row",xmlValue)
xpathSApply(rootnote, path="//zipcode")
temp <- xpathSApply(rootnote, path="//zipcode")
temp <- xpathApply(rootnote, path="//zipcode")
temp <- xpathSApply(rootnote, path="//zipcode")
names(temp)
temp$zipcode
rootnote$row
rootnote
rootnote[,]
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- readLines(url)
html[10]
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(x[4])
head(x)
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
getwd()
x <- read.fwf(
file="getdata-wksst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(x[4])
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "e1a4f27951d9e7ae94f7")
?oauth_app
myapp <- oauth_app("bakapp", "e1a4f27951d9e7ae94f7", "81630c956e452f69fe79a8a0ef62ae20c2f4b24a")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
install.packages(jsonlite)
install.packages("jsonlite")
content(req)
json2 <- jsonlite::fromJSON(toJSON(content(req)))
json2 <- jsonlite::fromJSON(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
json2
names(json2)
json2$name
json2[json2$name=="datasharing",]
json2[json2$name=="datasharing",]$created_at
source('~/Coursera/exdata/project1/plot1.R')
hist(as.numeric(data$Global_active_power), main = "Global Active Power", col = "orange", xlab = "Global Active Power (kilowatts)")
hist(as.numeric(data$Global_active_power), main = "Global Active Power", col = "orange", xlab = "Global Active Power (kilowatts)", breaks = c(0.2, 0.4, 0.6))
data$Global_active_power <- as.numeric(data$Global_active_power) *1000
View(data)
View(data)
data <- read.csv("household_power_consumption.txt", sep=";")
data <- data[data$Date %in% c("1/2/2007", "2/2/2007"),]
View(data)
data$Global_active_power
as.numeric(data$Global_active_power)
a <-data$Global_active_power
a
